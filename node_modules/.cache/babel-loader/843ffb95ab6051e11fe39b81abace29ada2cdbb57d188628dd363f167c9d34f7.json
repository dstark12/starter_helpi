{"ast":null,"code":"//import React, { useState } from 'react';\nimport axios from 'axios';\nexport const GetResponse = async (apikey, prompt, result) => {\n  const apiUrl = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apikey}`\n  };\n  const requestBody = {\n    model: \"gpt-4o\",\n    messages: [{\n      role: 'system',\n      content: 'You are an agent that assist people with finding career suggestions. You always respond in the exact format requested, without any additional comments.'\n    }, {\n      role: 'user',\n      content: prompt\n    }]\n  };\n  const {\n    data\n  } = await axios.post(apiUrl, requestBody, {\n    headers\n  });\n  try {\n    let response = data.choices[0].message.content;\n    let c1 = response.substring(response.indexOf(\"Career 1:\"), response.indexOf(\"Career 2:\"));\n    let c2 = response.substring(response.indexOf(\"Career 2:\"), response.indexOf(\"Career 3:\"));\n    let c3 = response.substring(response.indexOf(\"Career 3:\"), response.length);\n    result(`${c1}|${c2}|${c3}`);\n  } catch (error) {\n    console.log(\"Error parsing GPT response!\");\n    console.log(error);\n    result(data.choices[0].message.content);\n  }\n\n  // result(\"Career 1: Software Engineer. You like money.|Career 2: Data Scientist. You really like money.|Career 3: Nvidia Software Engineer. You really, REALLY like money.\");\n};\n_c = GetResponse;\nexport function utils_answers_to_list(dict) {\n  return Object.values(dict);\n}\nexport function utils_questions_to_list(dict) {\n  let vals = [];\n  for (let i of dict) {\n    vals = [...vals, i.questionText];\n  }\n  return vals;\n}\nvar _c;\n$RefreshReg$(_c, \"GetResponse\");","map":{"version":3,"names":["axios","GetResponse","apikey","prompt","result","apiUrl","headers","requestBody","model","messages","role","content","data","post","response","choices","message","c1","substring","indexOf","c2","c3","length","error","console","log","_c","utils_answers_to_list","dict","Object","values","utils_questions_to_list","vals","i","questionText","$RefreshReg$"],"sources":["/Users/dustin/starter_helpi/src/Components/chat.tsx"],"sourcesContent":["//import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport const GetResponse = async (apikey: string, prompt: string, result: (arg0: string) => void) => {\n  \n  const apiUrl = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apikey}`,\n  };\n  const requestBody = {\n    model: \"gpt-4o\",\n    messages: [{role: 'system', content: 'You are an agent that assist people with finding career suggestions. You always respond in the exact format requested, without any additional comments.'}, { role: 'user', content: prompt }],\n  };\n\n  \n  const { data } = await axios.post(apiUrl, requestBody, { headers });\n\n  try{\n    let response:string = data.choices[0].message.content;\n    let c1 = response.substring(response.indexOf(\"Career 1:\"), response.indexOf(\"Career 2:\"));\n    let c2 = response.substring(response.indexOf(\"Career 2:\"), response.indexOf(\"Career 3:\"));\n    let c3 = response.substring(response.indexOf(\"Career 3:\"), response.length);\n    result(`${c1}|${c2}|${c3}`);\n  }\n  catch(error){\n    console.log(\"Error parsing GPT response!\");\n    console.log(error);\n    result(data.choices[0].message.content);\n  }\n  \n // result(\"Career 1: Software Engineer. You like money.|Career 2: Data Scientist. You really like money.|Career 3: Nvidia Software Engineer. You really, REALLY like money.\");\n}\n\nexport function utils_answers_to_list(dict: { [key: number]: string }): string[] {\n  return Object.values(dict);\n}\n\nexport function utils_questions_to_list(dict: { id: number, questionText: string }[]): string[] {\n  let vals: string[] = [];\n  for (let i of dict) {\n    vals = [...vals, i.questionText];\n  }\n  return vals;\n}"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,MAAc,EAAEC,MAAc,EAAEC,MAA8B,KAAK;EAEnG,MAAMC,MAAM,GAAG,4CAA4C;EAC3D,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUJ,MAAM;EACnC,CAAC;EACD,MAAMK,WAAW,GAAG;IAClBC,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE,CAAC;MAACC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAyJ,CAAC,EAAE;MAAED,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAER;IAAO,CAAC;EACpO,CAAC;EAGD,MAAM;IAAES;EAAK,CAAC,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAACR,MAAM,EAAEE,WAAW,EAAE;IAAED;EAAQ,CAAC,CAAC;EAEnE,IAAG;IACD,IAAIQ,QAAe,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO;IACrD,IAAIM,EAAE,GAAGH,QAAQ,CAACI,SAAS,CAACJ,QAAQ,CAACK,OAAO,CAAC,WAAW,CAAC,EAAEL,QAAQ,CAACK,OAAO,CAAC,WAAW,CAAC,CAAC;IACzF,IAAIC,EAAE,GAAGN,QAAQ,CAACI,SAAS,CAACJ,QAAQ,CAACK,OAAO,CAAC,WAAW,CAAC,EAAEL,QAAQ,CAACK,OAAO,CAAC,WAAW,CAAC,CAAC;IACzF,IAAIE,EAAE,GAAGP,QAAQ,CAACI,SAAS,CAACJ,QAAQ,CAACK,OAAO,CAAC,WAAW,CAAC,EAAEL,QAAQ,CAACQ,MAAM,CAAC;IAC3ElB,MAAM,CAAC,GAAGa,EAAE,IAAIG,EAAE,IAAIC,EAAE,EAAE,CAAC;EAC7B,CAAC,CACD,OAAME,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CD,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBnB,MAAM,CAACQ,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO,CAAC;EACzC;;EAED;AACD,CAAC;AAAAe,EAAA,GA7BYzB,WAAW;AA+BxB,OAAO,SAAS0B,qBAAqBA,CAACC,IAA+B,EAAY;EAC/E,OAAOC,MAAM,CAACC,MAAM,CAACF,IAAI,CAAC;AAC5B;AAEA,OAAO,SAASG,uBAAuBA,CAACH,IAA4C,EAAY;EAC9F,IAAII,IAAc,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,IAAIL,IAAI,EAAE;IAClBI,IAAI,GAAG,CAAC,GAAGA,IAAI,EAAEC,CAAC,CAACC,YAAY,CAAC;EAClC;EACA,OAAOF,IAAI;AACb;AAAC,IAAAN,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}