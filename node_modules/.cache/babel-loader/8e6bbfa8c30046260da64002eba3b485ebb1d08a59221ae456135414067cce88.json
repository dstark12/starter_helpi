{"ast":null,"code":"//import React, { useState } from 'react';\n//import axios from 'axios';\n\nexport const GetResponse = async (apikey, prompt, result) => {\n  /*\n  const apiUrl = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apikey}`,\n  };\n  const requestBody = {\n    model: \"gpt-4o\",\n    messages: [{role: 'system', content: 'You are an agent that assist people with finding career suggestions. You always respond in the exact format requested, without any additional comments.'}, { role: 'user', content: prompt }],\n  };\n   \n  const { data } = await axios.post(apiUrl, requestBody, { headers });\n   try{\n    let response:string = data.choices[0].message.content;\n    let c1 = response.substring(response.indexOf(\"Career 1:\"), response.indexOf(\"Career 2:\"));\n    let c2 = response.substring(response.indexOf(\"Career 2:\"), response.indexOf(\"Career 3:\"));\n    let c3 = response.substring(response.indexOf(\"Career 3:\"), response.length);\n    result(`${c1}|${c2}|${c3}`);\n  }\n  catch(error){\n    console.log(\"Error parsing GPT response!\");\n    console.log(error);\n    result(data.choices[0].message.content);\n  }\n  */\n  result(\"Career 1: Software Engineer. You like money.|Career 2: Data Scientist. You really like money.|Career 3: Nvidia Software Engineer. You really, REALLY like money.\");\n};\n_c = GetResponse;\nexport function utils_answers_to_list(dict) {\n  return Object.values(dict);\n}\nexport function utils_questions_to_list(dict) {\n  let vals = [];\n  for (let i of dict) {\n    vals = [...vals, i.questionText];\n  }\n  return vals;\n}\nvar _c;\n$RefreshReg$(_c, \"GetResponse\");","map":{"version":3,"names":["GetResponse","apikey","prompt","result","_c","utils_answers_to_list","dict","Object","values","utils_questions_to_list","vals","i","questionText","$RefreshReg$"],"sources":["/Users/dustin/starter_helpi/src/Components/chat.tsx"],"sourcesContent":["//import React, { useState } from 'react';\n//import axios from 'axios';\n\nexport const GetResponse = async (apikey: string, prompt: string, result: (arg0: string) => void) => {\n  /*\n  const apiUrl = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apikey}`,\n  };\n  const requestBody = {\n    model: \"gpt-4o\",\n    messages: [{role: 'system', content: 'You are an agent that assist people with finding career suggestions. You always respond in the exact format requested, without any additional comments.'}, { role: 'user', content: prompt }],\n  };\n\n  \n  const { data } = await axios.post(apiUrl, requestBody, { headers });\n\n  try{\n    let response:string = data.choices[0].message.content;\n    let c1 = response.substring(response.indexOf(\"Career 1:\"), response.indexOf(\"Career 2:\"));\n    let c2 = response.substring(response.indexOf(\"Career 2:\"), response.indexOf(\"Career 3:\"));\n    let c3 = response.substring(response.indexOf(\"Career 3:\"), response.length);\n    result(`${c1}|${c2}|${c3}`);\n  }\n  catch(error){\n    console.log(\"Error parsing GPT response!\");\n    console.log(error);\n    result(data.choices[0].message.content);\n  }\n  */\n  result(\"Career 1: Software Engineer. You like money.|Career 2: Data Scientist. You really like money.|Career 3: Nvidia Software Engineer. You really, REALLY like money.\");\n}\n\nexport function utils_answers_to_list(dict: { [key: number]: string }): string[] {\n  return Object.values(dict);\n}\n\nexport function utils_questions_to_list(dict: { id: number, questionText: string }[]): string[] {\n  let vals: string[] = [];\n  for (let i of dict) {\n    vals = [...vals, i.questionText];\n  }\n  return vals;\n}\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAOC,MAAc,EAAEC,MAAc,EAAEC,MAA8B,KAAK;EACnG;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGEA,MAAM,CAAC,kKAAkK,CAAC;AAC5K,CAAC;AAAAC,EAAA,GA7BYJ,WAAW;AA+BxB,OAAO,SAASK,qBAAqBA,CAACC,IAA+B,EAAY;EAC/E,OAAOC,MAAM,CAACC,MAAM,CAACF,IAAI,CAAC;AAC5B;AAEA,OAAO,SAASG,uBAAuBA,CAACH,IAA4C,EAAY;EAC9F,IAAII,IAAc,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,IAAIL,IAAI,EAAE;IAClBI,IAAI,GAAG,CAAC,GAAGA,IAAI,EAAEC,CAAC,CAACC,YAAY,CAAC;EAClC;EACA,OAAOF,IAAI;AACb;AAAC,IAAAN,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}